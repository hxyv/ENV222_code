---
title: "W7 Exercise - Tidyverse"
author: "Xingyu Hu"
date: "`r Sys.Date()`"
format: 
    html:
        theme: default
        embed-resources: true
        code-block-bg: true
        code-block-border-left: "black"
        comments: 
            hypothesis: true
---

1. The following code generate a long table:

```{r}
stocks <- data.frame(year   = c(2015, 2015, 2016, 2016),
                     half   = c(   1,    2,    1,    2),
                     return = c(1.88, 0.59, 0.92, 0.17))
```

Convert it into a wide table as:

||year|1|2|
|:-:|:-:|:-:|:-:|
|1|2015|1.88|0.59|
|2|2016|0.92|0.17|

and convert it back to a tidy dataset.

```{r}
#| message: false
#| warning: false

library(tidyverse)
```


```{r}
stocks_wide <- stocks |> 
    pivot_wider(names_from = "half", values_from = "return") |>
    print()
    
stocks_tidy <- stocks_wide |> 
    pivot_longer(c("1", "2"), names_to = "half", values_to = "return") |>
    print()
    
```

2. Why does this code fail? How do you correct it?

```{r}
#| eval: FALSE

table4a %>% 
  pivot_longer(c(1999, 2000), names_to = "year", values_to = "cases")
```

```{r}
tidy4a <- table4a |> 
    pivot_longer(c("1999", "2000"), names_to ="year", values_to = "cases") |> 
    print()
```


3. What would happen if you widden this table? Why?

```{R}
people <- tribble(
  ~name,             ~names,  ~values,
  "Phillip Woods",   "age",       45,
  "Phillip Woods",   "height",   186,
  "Phillip Woods",   "age",       50,
  "Jessica Cordero", "age",       37,
  "Jessica Cordero", "height",   156
) |> 
    print()
```

```{r}
# Redundant value exits
people_wide <- people[-3,] |> 
    pivot_wider(names_from = names, values_from = values) |> 
    print()
```

4. Tidy the simple tibble below. Do you need to make it wider or longer? What are the variables?

```{r}
preg <- tribble(
  ~pregnant, ~male, ~female,
  "yes",     NA,    10,
  "no",      20,    12
) |> 
    print()
```

```{r}
preg_longer <- preg |> 
    pivot_longer(c("male", "female"), names_to = "gender", values_to = "count") |> 
    print()
```

5. The `nycflights13::flights` data frame contains all 336,776 flights that departed from New York City in 2013. Based on this dataset, answer the following questions:

```{r}
#| warning: false

library(nycflights13)
```


a) Which plane (`tailnum`) has the worst on-time record?

```{r}
flights <- nycflights13::flights

worst_plane <- flights |> 
    group_by(tailnum) |> 
    summarise(mean_arr_delay = mean(arr_delay, na.rm = TRUE)) |> 
    arrange(desc(mean_arr_delay))

head(worst_plane, 5)
```

b) What time of day should you fly if you want to avoid delays as much as possible?

```{r}
best_time <- flights |> 
    group_by(sched_dep_time) |> 
    summarise(time = mean(arr_delay, na.rm = TRUE)) |> 
    arrange(time)

head(best_time, 5)
```

c) For each destination, compute the total minutes of delay. For each flight, compute the proportion of the total delay for this destination.

```{r}
delay_flights <- flights |> 
    filter(arr_delay > 0)

delay_dest <- delay_flights |> 
    group_by(dest) |> 
    summarise(total_arr_delay = sum(arr_delay, na.rm = TRUE))
head(delay_dest, 5)

delay_prop_flight <- delay_flights |> 
    left_join(delay_dest, by = "dest") |> 
    mutate(delay_prop = arr_delay / total_arr_delay) |> 
    select(dest, flight, delay_prop)
head(delay_prop_flight, 5)
```

d) Find all destinations that are flown by at least two carriers. Use that information to rank the carriers.

```{r}
#| message: false

carrier_rank <- flights |> 
    group_by(dest) |>
    filter(n_distinct(carrier) >= 2) |>
    distinct(carrier) |> 
    group_by(carrier) |> 
	summarise(Freq = n_distinct(dest)) |> 
	arrange(desc(Freq))

head(carrier_rank, 5)
```

e) For each plane, count the number of flights in each month.

```{r}
#| message: false

month_flights <- flights |>
    group_by(tailnum, month) |> 
    summarise(num_flight = n_distinct(flight)) |> 
    arrange(tailnum)

head(month_flights, 12)
```